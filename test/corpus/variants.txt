===
Check a tag
===

check `foo

---

(source_file
	(toplevel
		(check)
		(tag (backtick))))

===
Define a variant
===

def V := variant { `foo : Nat }

---

(source_file
	(toplevel
		(definition)
		(identifier)
		(coloneq)
		(variant_expr
			(variant)
			(lbrace)
			(variant_field
				(tag (backtick))
				(colon)
				(nat))
			(rbrace))))


===
Define a variant with multiple fields
===

def V := variant { `foo | `moo : Fin 3 }

---

(source_file
	(toplevel
		(definition)
		(identifier)
		(coloneq)
		(variant_expr
			(variant)
			(lbrace)
			(variant_field
				(tag (backtick)))
			(vbar)
			(variant_field
				(tag (backtick))
				(colon)
				(fin)
				(numeral))
			(rbrace))))


===
Match statement
===

eval match `foo with
     | `foo => 0
     | `moo (x : Nat) => x
     end

---

(source_file
	(toplevel
		(eval)
		(match_expr
			(match)
			(tag (backtick))
			(with_keyword)
			(match_case
				(vbar)
				(tag (backtick))
				(darrow)
				(numeral))
			(match_case
				(vbar)
				(tag (backtick))
				(lparen)
				(identifier)
				(colon)
				(nat)
				(rparen)
				(darrow)
				(identifier))
			(end))))
